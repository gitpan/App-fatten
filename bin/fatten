#!perl

our $DATE = '2014-11-23'; # DATE
our $VERSION = '0.20'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::fatten;

Perinci::CmdLine::fatten->new(
    log => 1,
    url => '/App/fatten/fatten',
)->run;

#ABSTRACT: Pack your dependencies onto your script file
#PODNAME: fatten

__END__

=pod

=encoding UTF-8

=head1 NAME

fatten - Pack your dependencies onto your script file

=head1 VERSION

This document describes version 0.20 of fatten (from Perl distribution App-fatten), released on 2014-11-23.

=head1 SYNOPSIS

 # by default outputs to '<script>.packed' in the source directory, or in
 # current directory if source directory is not writable.
 % fatten bin/script.pl

 # some options (set debug, set target perl version, add some modules, set
 # output)
 % fatten --debug -V 5.10.1 -I Foo::Bar -I Baz script.pl script.pl.packed

 # see more options
 % fatten --help

=head1 DESCRIPTION

 "Thank you for a freakin awesome app. Seriously, fatten is great! <3"
 -- Paul J. Fenwick

B<fatten> is an alternative command-line script for L<App::FatPacker>. I had a
few problems when using the B<fatpack> script which comes with
C<App::FatPacker>, namely: 1) using B<fatpack> to produce a fatpacked-script is
a multistep process and I always forget the steps; 2) some modules that ought to
be included are often not included; 3) I can't exclude some modules that I don't
want to include, e.g. Perl core modules which should always already be
available.

Thus, here are the differences of B<fatten> compared to B<fatpack>:

=over

=item * A simpler interface and some nice defaults

Using B<fatten>, you only need a single step to produce the final result.

Currently B<fatten> ignores C<fatlib/> and XS modules. It only focuses on
creating free-standing Perl script which depends on pure-Perl modules (C<.pm>
files) only. Including C<fatlib/> to a stand-alone script will require an
approach like L<PAR::Archive> (i.e. bundling the required files in an archive
and extracting the required files into a temporary directory).

By default B<fatten> skips Perl core modules. This results in a smaller product.

B<fatpack> sometimes fails to include some modules because it can't find the
C<.packlist> for said modules. B<fatten> goes ahead and tries the next best
thing which is to copy just the C<.pm> files.

=item * Alternative methods to trace script's dependencies

There are various methods of tracing a script's dependencies, each with their
own pro's and con's. B<fatpack> checks C<%INC> in the C<CHECK> phase, and this
misses modules loaded during run-time using C<require>. Other methods include:
trapping C<require> (but this can also miss modules loaded conditionally
depending on execution path), static analysis using L<Perl::PrereqScanner> (this
can also miss some modules loaded in unusual ways).

B<fatten> uses L<App::tracepm>, which provides various methods of tracing. See
App::tracepm documentation for more details.

Of course, like B<fatpack>, you can also specify additional modules to include.
And, unlike B<fatpack>, you can specify modules to exclude as well.

=item * Some extra options

Like an option to strip/squish the module source codes with L<Perl::Strip>
(C<--strip>) or L<Perl::Stripper> (C<--stripper>) or L<Perl::Squish>
(C<--squish>).

=item * Configuration file support

See L</"CONFIGURATION FILE"> for more details.

=back

=head1 OPTIONS

C<*> marks required options.

=head2 Common options

=over

=item B<--config-path>=I<s>

Set path to configuration file.

=item B<--config-profile>=I<s>

Set configuration profile to use.

=item B<--debug>

Set log level to 'debug'.

=item B<--format>=I<s>

Set output format.

=item B<--help>, B<-h>, B<-?>

Show help message.

=item B<--json>

Set output format to json.

=item B<--log-level>=I<s>

Set log level.

=item B<--no-config>

Do not use any configuration file.

=item B<--quiet>

Set log level to 'error'.

=item B<--trace>

Set log level to 'trace'.

=item B<--verbose>

Set log level to 'info'.

=item B<--version>, B<-v>

Show program version.

=back

=head2 Debugging options

=over

=item B<--debug-keep-tempdir>

Keep temporary directory for debugging.

=back

=head2 Module-selection options

=over

=item B<--exclude-dist-json>=I<s>

Exclude all modules of dist (JSON-encoded).

See C<--exclude-dist=s@>.

=item B<--exclude-dist>=I<s@>

Exclude all modules of dist.

Just like the `exclude` option, but will exclude module as well as other modules
from the same distribution. Module name must be the main module of the
distribution. Will determine other modules from the `.packlist` file.


Can be specified multiple times.

=item B<--exclude-json>=I<s>, B<-E>

Modules to exclude (JSON-encoded).

See C<--exclude=s@>.

=item B<--exclude-pattern-json>=I<s>, B<-p>

Regex patterns of modules to exclude (JSON-encoded).

See C<--exclude-pattern=s@>.

=item B<--exclude-pattern>=I<s@>

Regex patterns of modules to exclude.

When you don't want to include a pattern of modules, specify it here.


Can be specified multiple times.

=item B<--exclude>=I<s@>

Modules to exclude.

When you don't want to include a module, specify it here.


Can be specified multiple times.

=item B<--include-dist-json>=I<s>

Include all modules of dist (JSON-encoded).

See C<--include-dist=s@>.

=item B<--include-dist>=I<s@>

Include all modules of dist.

Just like the `include` option, but will include module as well as other modules
from the same distribution. Module name must be the main module of the
distribution. Will determine other modules from the `.packlist` file.


Can be specified multiple times.

=item B<--include-json>=I<s>, B<-I>

Include extra modules (JSON-encoded).

See C<--include=s@>.

=item B<--include>=I<s@>

Include extra modules.

When the tracing process fails to include a required module, you can add it
here.


Can be specified multiple times.

=item B<--no-exclude-core>

Do not exclude core modules.

=item B<--trace-method>=I<s>, B<-t>

Which method to use to trace dependencies.

Default value:

 "fatpacker"

The default is `fatpacker`, which is the same as what `fatpack trace` does.
Different tracing methods have different pro's and con's, one method might
detect required modules that another method does not, and vice versa. There are
several methods available, please see `App::tracepm` for more details.


=item B<--use-json>=I<s>

Additional modules to "use" (JSON-encoded).

See C<--use=s@>.

=item B<--use>=I<s@>

Additional modules to "use".

Will be passed to the tracer. Will currently only affect the `fatpacker` and
`require` methods (because those methods actually run your script).


Can be specified multiple times.

=back

=head2 Options

=over

=item B<--args-json>=I<s>

Script arguments (JSON-encoded).

See C<--args=s@>.

=item B<--args>=I<s@>

Script arguments.

Will be used when running your script, e.g. when `trace_method` is `require`.
For example, if your script requires three arguments: `--foo`, `2`, `"bar baz"`
then you can either use:

    % fatten script output --args --foo --args 2 --args "bar baz"

or:

    % fatten script output --args-json '["--foo",2,"bar baz"]'


Can be specified multiple times.

=item B<--input-file>=I<s>, B<-i>

Path to input file (script to be fatpacked).

Default value:

 "-"

`-` (or if unspecified) means to take from standard input (internally, a
temporary file will be created to handle this).


=item B<--perl-version>=I<s>, B<-V>

Perl version to target, defaults to current running version.

This is for determining which modules are considered core and should be skipped
by default (when `exclude_core` option is enabled). Different perl versions have
different sets of core modules as well as different versions of the modules.


=item B<--shebang>=I<s>

Set shebang line/path.

Default value:

 "/usr/bin/perl"

=back

=head2 Output options

=over

=item B<--output-file>=I<s>, B<-o>

Path to output file.

If input is from stdin, then output defaults to stdout. You can also specify
stdout by using `-`.

Otherwise, defaults to `<script>.fatpack` in source directory. If source
directory happens to be unwritable by the script, will try `<script>.fatpack` in
current directory. If that fails too, will die.


=item B<--overwrite>

Whether to overwrite output if previously exists.

=back

=head2 Stripping options

=over

=item B<--no-stripper-comment>

Set strip_comment=0 (don't strip comments) in Perl::Stripper.

Only relevant when stripping using Perl::Stripper.


=item B<--no-stripper-pod>

Set strip_pod=0 (don't strip POD) in Perl::Stripper.

Only relevant when stripping using Perl::Stripper.


=item B<--no-stripper-ws>

Set strip_ws=0 (don't strip whitespace) in Perl::Stripper.

Only relevant when stripping using Perl::Stripper.


=item B<--squish>

Whether to squish included modules using Perl::Squish.

=item B<--strip>

Whether to strip included modules using Perl::Strip.

=item B<--stripper>

Whether to strip included modules using Perl::Stripper.

=item B<--stripper-log>

Set strip_log=1 (strip log statements) in Perl::Stripper.

Only relevant when stripping using Perl::Stripper.


=item B<--stripper-maintain-linum>

Set maintain_linum=1 in Perl::Stripper.

Only relevant when stripping using Perl::Stripper.


=back

=head1 FILES

B</etc/fatten.conf>

B<~/fatten.conf>

=head1 CONFIGURATION FILE

(Note: configuration file support is via L<Perinci::CmdLine>).

Configuration file is expected to be at C</etc/fatten.conf> or C<~/fatten.conf>
in the format of L<IOD> (basically INI). You can put a section like this:

 [profile=parse-id-phone]
 trace_method=require
 #overwrite=1
 include=Parse::PhoneNumber::ID
 include=Perinci::CmdLine::Lite
 include=Data::Check::Structure
 include=Text::Table::Tiny

which will automatically be used when you fatten a script named
C<parse-id-phone>. Or you can select a profile explicitly using
C<--config-profile> option.

The config parameters are command-line options. The short aliases are not
recognized, use long names. Dashes (C<->) becomes underscores (C<_>). See
L<App::fatten> for known options/parameters.

=head1 SEE ALSO

L<App::FatPacker>

For producing free-standing Perl scripts/applications, there are other
alternatives like L<PAR::Packer> (can also pack XS modules and compress the
included files in a special archive, but with higher startup time and temporary
directory to extract stuffs).

L<Perl::Stripper>

=head1 COMPLETION

This script has shell tab completion capability with support for several shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C fatten fatten

in your bash startup (e.g. C<~/.bashrc>). Your next shell session will then recognize tab completion for the command. Or, you can also directly execute the line above in your shell to activate immediately.

You can also install L<App::BashCompletionProg> which makes it easy to add completion for Perinci::CmdLine-based scripts. After you install the module and put C<. ~/.bash-complete-prog> (or C<. /etc/bash-complete-prog>), you can just run C<bash-completion-prog> and the C<complete> command will be added to your C<~/.bash-completion-prog>. Your next shell session will then recognize tab completion for the command.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete fatten 'p/*/`fatten`/'

in your tcsh startup (e.g. C<~/.tcshrc>). Your next shell session will then recognize tab completion for the command. Or, you can also directly execute the line above in your shell to activate immediately.

=head2 zsh

To activate zsh completion for this script, put:

 _fatten() { read -l; local cl="$REPLY"; read -ln; local cp="$REPLY"; reply=(`COMP_LINE="$cl" COMP_POINT="$cp" fatten`) }

 compctl -K _fatten fatten

in your zsh startup (e.g. C<~/.zshrc>). Your next shell session will then recognize tab completion for the command. Or, you can also directly execute the line above in your shell to activate immediately.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-fatten>.

=head1 SOURCE

Source repository is at L<https://github.com/sharyanto/perl-App-fatten>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-fatten>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2014 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
