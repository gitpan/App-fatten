#!perl

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine;

our $VERSION = '0.08'; # VERSION

Perinci::CmdLine->new(url => '/App/fatten/fatten')->run;

#ABSTRACT: Pack your dependencies onto your script file
#PODNAME: fatten

__END__

=pod

=encoding UTF-8

=head1 NAME

fatten - Pack your dependencies onto your script file

=head1 VERSION

This document describes version 0.08 of fatten (from Perl distribution App-fatten), released on 2014-10-16.

=head1 SYNOPSIS

 # by default outputs to 'packed' in the current directory
 % fatten bin/script.pl

 # some options (set debug, set target perl version, add some modules, set output)
 % fatten --debug -V 5.10.1 -I Foo::Bar -I Baz script.pl script.pl.packed

 # see more options
 % fatten --help

=head1 DESCRIPTION

B<fatten> is an alternative command-line script for L<App::FatPacker>. I had a
few problems when using the B<fatpack> script which comes with
C<App::FatPacker>, namely: 1) using B<fatpack> to produce a fatpacked-script is
a multistep process and I always forget the steps; 2) some modules that ought to
be included are often not included; 3) I can't exclude some modules that I don't
want to include, e.g. Perl core modules which should always already be
available.

Thus, here are the differences of B<fatten> compared to B<fatpack>:

=over

=item * A simpler interface and some nice defaults

Using B<fatten>, you only need a single step to produce the final result.

Currently B<fatten> ignores C<fatlib/> and XS modules. It only focuses on
creating free-standing Perl script which depends on pure-Perl modules (C<.pm>
files) only. Including C<fatlib/> to a stand-alone script will require an
approach like L<PAR::Archive> (i.e. bundling the required files in an archive
and extracting the required files into a temporary directory).

By default B<fatten> skips Perl core modules. This results in a smaller product.

B<fatpack> sometimes fails to include some modules because it can't find the
C<.packlist> for said modules. B<fatten> goes ahead and tries the next best
thing which is to copy just the C<.pm> files.

=item * Alternative methods to trace script's dependencies

There are various methods of tracing a script's dependencies, each with their
own pro's and con's. B<fatpack> checks C<%INC> in the C<CHECK> phase, and this
misses modules loaded during run-time using C<require>. Other methods include:
trapping C<require> (but this can also miss modules loaded conditionally
depending on execution path), static analysis using L<Perl::PrereqScanner> (this
can also miss some modules loaded in unusual ways).

B<fatten> uses L<App::tracepm>, which provides various methods of tracing. See
App::tracepm documentation for more details.

Of course, like B<fatpack>, you can also specify additional modules to include.
And, unlike B<fatpack>, you can specify modules to exclude as well.

=item * Some extra options

Like an option to strip the modules with L<Perl::Stripper>.

=back

=head1 SEE ALSO

L<App::FatPacker>

For producing free-standing Perl scripts/applications, there are other
alternatives like L<PAR::Packer> (can also pack XS modules and compress the
included files in a special archive, but with higher startup time and temporary
directory to extract stuffs).

L<Perl::Stripper>

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-fatten>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-fatten>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-fatten>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2014 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
